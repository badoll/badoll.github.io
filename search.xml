<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MAC和LINUX下环境变量的相关文件和配置</title>
    <url>/2019/11/19/MAC%E5%92%8CLINUX%E4%B8%8B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>之前一直没怎么搞清楚环境变量的文件的配置，现在整理了一下网上查阅到的资料和自己的理解。  </p>
</blockquote><h1 id="环境变量的配置文件"><a href="#环境变量的配置文件" class="headerlink" title="环境变量的配置文件"></a>环境变量的配置文件</h1><p>先说一下这几个配置环境变量的文件吧，读取的顺序依次是：<br>/etc/profile<br>/etc/paths<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc<br>/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量，按照从前往后的顺序读取。<br>如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。<br>同样，如果你的shell是zsh，则会在zsh shell打开的时候读取.zshrc。  </p><a id="more"></a>

<ol>
<li><strong>/etc/profile</strong>：系统级配置文件，也是全局的配置文件，不管是哪个用户，登录时都会读取该文件。<br>此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。（不建议修改这个文件）<br>在mac下，有个<strong>path_helper</strong>的工具，这个工具会读取<strong>/etc/paths</strong>里面的路径和<strong>/etc/paths.d</strong>目录下的文件里面的路径，然后加载在环境变量$PTAH，可以选择把自己下载的软件的运行路径放在该文件夹下，登陆后会自动将该路径读取到环境变量中。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> System-wide .profile <span class="keyword">for</span> sh(1)</span></span><br><span class="line">if [ -x /usr/libexec/path_helper ]; then</span><br><span class="line">	eval `/usr/libexec/path_helper -s`</span><br><span class="line">fi</span><br><span class="line">if [ "$&#123;BASH-no&#125;" != "no" ]; then</span><br><span class="line">	[ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
在linux下，有个/etc/profile.d的文件夹，你可以在该文件夹下写个添加环境变量的脚本，然后/etc/profile会在这个文件夹下遍历里面的脚本，然后把你脚本中的配置添加到环境变量中，这样比直接加到/etc/profile里要简便干净很多。</li>
<li><strong>/etc/paths</strong>：系统级配置文件，该文件里面一行一个路径，在系统启动时被path_helper工具读取然后配置到环境变量中，而且这些路径会被配置在<code>$PATH</code>的开头，意味着先搜索这些路径。详细可见这篇<a href="https://unix.stackexchange.com/questions/356688/what-is-the-difference-between-echo-path-and-etc-paths" target="_blank" rel="noopener">回答</a>。</li>
<li><strong>/etc/bashrc</strong>：系统级配置文件，所有用户打开一个bash shell时都会读取该文件，相对的，用户目录下的<code>~/.bashrc</code>则是用户级的配置文件。</li>
<li><strong>~/.bash_profile</strong>：每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.<br>另外，~/.bash_profile是交互式、login方式进入bash运行的。~/.bashrc 是交互式、non-login方式进入bash运行的；通常二者设置大致相同，所以通常前者会调用后者。</li>
<li><strong>～/.zshrc</strong>：如果你的shell是zsh，则在打开zsh时就会读取该文件，并且将该文件中export的环境变量添加到<code>$PATH</code>中。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><strong>/etc/profile</strong><br>登录shell读取，系统所有，仅执行一次。</li>
<li><strong>~/.bash_profile</strong><br>登录shell读取，个人所有，仅执行一次，该文件会读取~/.bashrc。<br>可以用<code>source ~/.bash_profile</code>来使配置文件生效。</li>
<li><strong>/ect/bashrc</strong><br>Ubuntu没有此文件，与之对应的是/ect/bash.bashrc,全局（公有）的bash执行时，不管是何种方式，都会读取此文件。</li>
<li><strong>~/.bashrc</strong><br>非登录shell读取(每打开一个终端都会读取)，个人所有。</li>
</ol>
<hr>
<h1 id="存放二进制文件的目录"><a href="#存放二进制文件的目录" class="headerlink" title="存放二进制文件的目录"></a>存放二进制文件的目录</h1><blockquote>
<p>/: this is root directory<br>/bin: commands in this dir are all system installed user commands<br>/sbin: commands in this dir are all system installed super user commands<br>/usr/bin: user commands for applications<br>/usr/sbin: super user commands for applications<br>/usr/local/bin: application user commands<br>/usr/local/sbin: application super user commands</p>
</blockquote>
<ol>
<li><strong>/bin</strong>：存放系统的一些命令。bin为binary的简写，主要放置一些系统的必备执行档例如：cat、cp、kill、ls、mkdir、rm等。</li>
<li><strong>/sbin</strong>：一般是指超级用户命令。主要放置一些系统管理的必备程式例如：shutdown、ifconfig等。</li>
<li><strong>/usr/bin</strong>：系统预装的可执行程序（会随着系统升级而改变）加上后期自己安装的一些软件运行脚本和可运行程序等，例如：c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 gzip、curl等。</li>
<li><strong>/usr/sbin</strong>：放置一些用户安装的系统管理的必备程式例如：chown、chroot、tcpdump等。</li>
<li><strong>/usr/local/bin</strong>：用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。  </li>
</ol>
<h4 id="usr-bin和-usr-sbin与-sbin和-bin目录的区别在于"><a href="#usr-bin和-usr-sbin与-sbin和-bin目录的区别在于" class="headerlink" title="/usr/bin和/usr/sbin与/sbin和/bin目录的区别在于"></a>/usr/bin和/usr/sbin与/sbin和/bin目录的区别在于</h4><ol>
<li>/bin和/sbin目录是在系统启动后挂载到根文件系统中的，所以/sbin和/bin目录必须和根文件系统在同一分区。</li>
<li>usr/bin和/usr/sbin可以和根文件系统不在一个分区。  </li>
</ol>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol>
<li>如果是用户和管理员必备的二进制文件，就会放在/bin；</li>
<li>如果是系统管理员必备，但是一般用户根本不会用到的二进制文件，就会放在 /sbin；</li>
<li>如果不是用户必备的二进制文件，多半会放在/usr/bin；</li>
<li>如果不是系统管理员必备的工具，如网络管理命令，多半会放在/usr/sbin。</li>
</ol>
<hr>
<h1 id="export"><a href="#export" class="headerlink" title="export"></a>export</h1><p>export用于声明一个环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export variable=value</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果是在系统级的配置文件中export，如/etc/profile中export一个变量，那么这个变量在配置文件生效后永久起作用。<br>如果在用户级~/.bashrc文件中export，则每次启动shell都会去读这个文件，所以每次打开shell也是可以取到这个值的。<br>如果在终端的某一次运行中，手动export一个变量，则只在这次shell的使用中，才能访问这个变量，或者在该shell启动的其他程序中，也是可以访问这个变量的，因为它们是这个shell的子进程。<br>linux的桌面程序，是不读取个人目录下的~/.bashrc等配置文件的，因此这些export的变量对用户桌面程序是没有意义的。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>unix</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建GithubPages上手过程</title>
    <url>/2019/11/17/hexo%E6%90%AD%E5%BB%BAGithubPages%E4%B8%8A%E6%89%8B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#为什么使用hexo">为什么使用hexo</a><br><a href="#如何使用hexo搭建Github-Pages">如何使用hexo搭建Github Pages</a><br><a href="#hexo的一些命令">hexo的一些命令</a><br><a href="#插件">插件</a><br><a href="#碰到的问题">碰到的问题</a></p><hr><h1 id="为什么使用hexo"><a href="#为什么使用hexo" class="headerlink" title="为什么使用hexo"></a>为什么使用hexo</h1><ol>
<li>hexo基于node.js，渲染速度比jekyll快很多（虽然对这种小博客没什么影响但就感觉很牛逼）。</li>
<li>jekyll是把文章推到github上，在GitHub上渲染生成html（大概是这样？)，hexo是在本地渲染成html然后再把博客中需要的文件推到github上，我是觉得文章放本地就好了，就没用jekyll。</li>
</ol><a id="more"></a>


<h1 id="如何使用hexo搭建Github-Pages"><a href="#如何使用hexo搭建Github-Pages" class="headerlink" title="如何使用hexo搭建Github Pages"></a>如何使用hexo搭建Github Pages</h1><p>这个百度谷歌一堆<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTcxNTIwNQ==&mid=2457916623&idx=2&sn=81e9148f0f40e234b126fee461bbe315" target="_blank" rel="noopener">教程</a>就不赘述了。</p>
<h1 id="hexo的一些命令"><a href="#hexo的一些命令" class="headerlink" title="hexo的一些命令"></a>hexo的一些命令</h1><ul>
<li><code>hexo new title</code><br><code>new</code>后面不加参数的话默认是新建一篇博文,默认参数是<code>post</code>，<code>title</code>就是你的文章的名字，运行命令后会自动在<code>_posts</code>目录下生成一个<code>title.md</code>文件。</li>
<li><code>hexo new draft title</code><br>这是在<code>_drafts</code>目录下生成一个名字为<code>title</code>的草稿，草稿写完觉得差不多了就可以使用<code>hexo publish title</code>把草稿发表了（注意是<code>title</code>不是<code>title.md</code>），这时候会自动把你<code>_drafts</code>目录中的<code>title.md</code>文件移动到<code>_posts</code>中。</li>
<li><code>hexo server --draft</code><br>可以在本地查看自己的博客，<code>--draft</code>参数可以查看自己草稿中的文章</li>
<li><code>hexo generate</code><br>根据你的配置文件和主题配置还有文章，生成静态网页，将需要推到github上的文件放在<code>public</code>文件夹。</li>
<li><code>hexo deploy</code><br>将生成的文件推到github上，现在就可以通过域名访问博客了。</li>
<li><code>hexo clean</code><br>清除之前生成的文件，如果配置完之后发现博客没有改变（例如换了个主题），可以尝试运行这个命令之后再生成和部署。</li>
<li><code>hexo new page tags</code><br>增加标签页，然后在tags下的index.md文件中配置。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签页</span><br><span class="line">date: 2019-11-17 14:13:55</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
然后在文章的开头配置<code>tags: xxx</code>即可为文章添加标签。</li>
<li><code>hexo new page categories</code><br>增加文章分类，然后在categories下的index.md文件中配置。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2019-11-17 17:39:31</span><br><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
然后在文章的开头配置<code>categories: xxx</code>即可为文章添加标签。</li>
</ul>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ol>
<li><strong>hexo-browsersync</strong><br>运行命令<code>hexo server --draft</code>后使用该插件可以实现一边在本地编辑文章，一边看文章的显示效果。</li>
<li><strong>hexo-asset-image</strong><br>先把主页配置文件<code>_config.yml</code>里的<code>post_asset_folder</code>这个选项设置为<code>true</code>，然后在<code>hexo</code>目录下安装该插件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br></pre></td></tr></table></figure>
配置完以后每次在创建文章的时候都会新建一个同名文件夹，然后将要插入文章的图片放在该文件夹中，markdown中的格式为<code>![pic](1.jpg)</code>，插件会自动将html中img的路径改为public文件夹中的图片的相对路径。</li>
<li><strong>hexo-generator-searchdb</strong><br>执行<code>npm install hexo-generator-searchdb --save</code>安装插件，然后在hexo目录下的_config.yml中添加如下配置。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
在主题下的配置文件中开启本地搜索。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
重新部署hexo。</li>
</ol>
<h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><ol>
<li><p>使用npm下载插件的时候npm audit报了几个安全隐患，应该是插件依赖的某个库版本太低了，可以忽略。<br><img src="/2019/11/17/hexo%E6%90%AD%E5%BB%BAGithubPages%E4%B8%8A%E6%89%8B%E8%BF%87%E7%A8%8B/1.png" alt="error"></p>
</li>
<li><p>使用<code>npm install hexo-asset-image --save</code>这条命令安装下来的插件解析出来的图片地址有问题，改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>下载hexo-asset-image，问题解决。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的一些使用技巧</title>
    <url>/2019/11/17/Markdown%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<hr><blockquote>
<p>更新于 2019.11.19</p>
</blockquote><p>由于今天写markdown发现排版有点问题，特此记录一下。</p><ul>
<li>markdown的换行需要在行的结尾多打两个空格，或者在行与行之间多加一行空格。<br>注意，在两个不同的有序列表之间，不能用行尾俩个空格代表分隔两个列表，必须要多出一行空行，不然下面的列表的数字会接着上面那个列表。</li>
<li>在有序列表中加入代码块时，需要在代码每一行加一个TAB，不然会被当成列表外的代码块，会将列表分隔开。</li>
<li>一些特殊符号例如<code>~</code>等，如果直接打出来不加转义符号<code>\\</code>的话，那一句话会被画上删除线。<br>另外，在一些markdown编辑器下，一些错误的语法可能不会被发现，我在typora上写完排版是没问题的，放在其他地方就会出问题，可以使用网上的一些编辑器测试一下自己的markdown显示有没有问题，Chrome上也有这种markdown编辑器的插件，可以下来试一试。</li>
</ul><a id="more"></a>



<hr>
<h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p>在一些markdown工具（typora）中可以在开头直接使用<code>[toc]</code>生成目录，但在github或者hexo上是不行的，需要使用以下的语法创建目录。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[<span class="string">title 1</span>](<span class="link">#title-1</span>)</span><br><span class="line"><span class="bullet">  - </span>[<span class="string">title 2</span>](<span class="link">#title-2</span>)</span><br><span class="line"><span class="bullet">    - </span>[<span class="string">title 3</span>](<span class="link">#title-3</span>)</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<ul>
<li><a href="#title-1">title 1</a><ul>
<li><a href="#title-2">title 2</a><ul>
<li><a href="#title-3">title 3</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="title-1"><a href="#title-1" class="headerlink" title="title 1"></a>title 1</h1><h2 id="title-2"><a href="#title-2" class="headerlink" title="title 2"></a>title 2</h2><h3 id="title-3"><a href="#title-3" class="headerlink" title="title 3"></a>title 3</h3><p>注意，如果标题有空格等其他符号，需要在转成<code>-</code>符号，括号中只允许字母、汉字、数字和<code>-</code>。</p>
<p>嵌套列表有以下两种实现方式。</p>
<ol>
<li>列表前插入四个空格（一个TAB），这样的方式比较简单，每次按一次TAB键就可以。</li>
<li>列表前插入对齐的空格数，不固定每次嵌套所需的空格数量，比如每个嵌套都插入两个空格，只要列表对齐就行。</li>
</ol>
<p>另外，如果不想每次自己手动写目录的话，有现成的工具可以使用。</p>
<ol>
<li><a href="https://ecotrust-canada.github.io/markdown-toc/" target="_blank" rel="noopener">网页生成</a></li>
<li>github上的一个<a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="noopener">脚本</a>，里面有详细的说明</li>
</ol>
<p>还有一些详细的技巧可以参考<a href="https://sspai.com/post/37273" target="_blank" rel="noopener">文章</a>。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
