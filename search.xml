<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo搭建GithubPages上手过程</title>
    <url>/2019/11/17/hexo%E6%90%AD%E5%BB%BAGithubPages%E4%B8%8A%E6%89%8B%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#为什么使用hexo">为什么使用hexo</a><br><a href="#如何使用hexo搭建Github-Pages">如何使用hexo搭建Github Pages</a><br><a href="#hexo的一些命令">hexo的一些命令</a><br><a href="#插件">插件</a><br><a href="#碰到的问题">碰到的问题</a></p>
<hr>
<h1 id="为什么使用hexo"><a href="#为什么使用hexo" class="headerlink" title="为什么使用hexo"></a>为什么使用hexo</h1><ol>
<li>hexo基于node.js，渲染速度比jekyll快很多（虽然对这种小博客没什么影响但就感觉很牛逼）。</li>
<li>jekyll是把文章推到github上，在GitHub上渲染生成html（大概是这样？)，hexo是在本地渲染成html然后再把博客中需要的文件推到github上，我是觉得文章放本地就好了，就没用jekyll。</li>
</ol>
<h1 id="如何使用hexo搭建Github-Pages"><a href="#如何使用hexo搭建Github-Pages" class="headerlink" title="如何使用hexo搭建Github Pages"></a>如何使用hexo搭建Github Pages</h1><p>这个百度谷歌一堆<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTcxNTIwNQ==&mid=2457916623&idx=2&sn=81e9148f0f40e234b126fee461bbe315" target="_blank" rel="noopener">教程</a>就不赘述了。</p>
<h1 id="hexo的一些命令"><a href="#hexo的一些命令" class="headerlink" title="hexo的一些命令"></a>hexo的一些命令</h1><ul>
<li><code>hexo new title</code><br><code>new</code>后面不加参数的话默认是新建一篇博文,默认参数是<code>post</code>，<code>title</code>就是你的文章的名字，运行命令后会自动在<code>_posts</code>目录下生成一个<code>title.md</code>文件。</li>
<li><code>hexo new draft title</code><br>这是在<code>_drafts</code>目录下生成一个名字为<code>title</code>的草稿，草稿写完觉得差不多了就可以使用<code>hexo publish title</code>把草稿发表了（注意是<code>title</code>不是<code>title.md</code>），这时候会自动把你<code>_drafts</code>目录中的<code>title.md</code>文件移动到<code>_posts</code>中。</li>
<li><code>hexo server --draft</code><br>可以在本地查看自己的博客，<code>--draft</code>参数可以查看自己草稿中的文章</li>
<li><code>hexo generate</code><br>根据你的配置文件和主题配置还有文章，生成静态网页，将需要推到github上的文件放在<code>public</code>文件夹。</li>
<li><code>hexo deploy</code><br>将生成的文件推到github上，现在就可以通过域名访问博客了。</li>
<li><code>hexo clean</code><br>清除之前生成的文件，如果配置完之后发现博客没有改变（例如换了个主题），可以尝试运行这个命令之后再生成和部署。</li>
<li><code>hexo new page tags</code><br>增加标签页，然后在tags下的index.md文件中配置。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签页</span><br><span class="line">date: 2019-11-17 14:13:55</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
然后在文章的开头配置<code>tags: xxx</code>即可为文章添加标签。</li>
<li><code>hexo new page categories</code><br>增加文章分类，然后在categories下的index.md文件中配置。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2019-11-17 17:39:31</span><br><span class="line">type: categories</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
然后在文章的开头配置<code>categories: xxx</code>即可为文章添加标签。</li>
</ul>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ol>
<li><strong>hexo-browsersync</strong><br>运行命令<code>hexo server --draft</code>后使用该插件可以实现一边在本地编辑文章，一边看文章的显示效果。</li>
<li><strong>hexo-asset-image</strong><br>先把主页配置文件<code>_config.yml</code>里的<code>post_asset_folder</code>这个选项设置为<code>true</code>，然后在<code>hexo</code>目录下执行<code>npm install hexo-asset-image --save</code>安装该插件。<br>配置完以后在创建文章的时候都会新建一个同名文件夹，然后将要插入文章的图片放在该文件夹中，hexo生成静态文件后文章html文件和图片文件在同一个文件夹，所以使用图片的相对路径<code>![title](1.jpg)</code></li>
<li><strong>hexo-generator-searchdb</strong><br>执行<code>npm install hexo-generator-searchdb --save</code>安装插件，然后在hexo目录下的_config.yml中添加如下配置。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
在主题下的配置文件中开启本地搜索。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
重新部署hexo。</li>
</ol>
<h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><ol>
<li>使用<code>npm install hexo-asset-image --save</code>下载hexo-asset-image的时候npm报了几个安全隐患，应该是插件依赖的一个库版本太低了，可以忽略。<br><img src="1.png" alt="error"></li>
</ol>
]]></content>
      <categories>
        <category>踩坑|配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的一些使用技巧</title>
    <url>/2019/11/17/Markdown%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p>在一些markdown工具（typora）中可以在开头直接使用<code>[toc]</code>生成目录，但在github或者hexo上是不行的，需要使用以下的语法创建目录。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[<span class="string">title 1</span>](<span class="link">#title-1</span>)</span><br><span class="line"><span class="bullet">  - </span>[<span class="string">title 2</span>](<span class="link">#title-2</span>)</span><br><span class="line"><span class="bullet">    - </span>[<span class="string">title 3</span>](<span class="link">#title-3</span>)</span><br></pre></td></tr></table></figure>
<p>显示效果如下</p>
<ul>
<li><a href="#title-1">title 1</a><ul>
<li><a href="#title-2">title 2</a><ul>
<li><a href="#title-3">title 3</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="title-1"><a href="#title-1" class="headerlink" title="title 1"></a>title 1</h1><h2 id="title-2"><a href="#title-2" class="headerlink" title="title 2"></a>title 2</h2><h3 id="title-3"><a href="#title-3" class="headerlink" title="title 3"></a>title 3</h3><p>注意，如果标题有空格等其他符号，需要在转成<code>-</code>符号，括号中只允许字母、汉字、数字和<code>-</code>。</p>
<p>嵌套列表有以下两种实现方式。</p>
<ol>
<li>列表前插入四个空格（一个TAB），这样的方式比较简单，每次按一次TAB键就可以。</li>
<li>列表前插入对齐的空格数，不固定每次嵌套所需的空格数量，比如每个嵌套都插入两个空格，只要列表对齐就行。<br>在typora上写markdown可以使用非strict模式，可以不用那么规范，好像会自动调整空格数。</li>
</ol>
<p>另外，如果不想每次自己手动写目录的话，有现成的工具可以使用。</p>
<ol>
<li><a href="https://ecotrust-canada.github.io/markdown-toc/" target="_blank" rel="noopener">网页生成</a></li>
<li>github上的一个<a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="noopener">脚本</a>，里面有详细的说明</li>
</ol>
<p>还有一些详细的技巧可以参考<a href="https://sspai.com/post/37273" target="_blank" rel="noopener">文章</a>。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
